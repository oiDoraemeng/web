/* 内联样式 > 内部样式表 > 外部样式表 > 浏览器样式表 */
/* 内联样式 > id 选择器 > 类选择器 = 伪类选择器 = 属性选择器 > 标签选择器 = 伪元素选择器 */

/* 全局选择器 一般用作初始化 */
* {
    color: rgb(0, 89, 255)
}

/* 元素选择器 */
body {
    background-color: yellow;
}

/* 合并选择器 */
p,
h4 {
    color: rgb(0, 162, 255) font-size： 30px
}

span {
    color: #000;
}

/* id 选择器 id是唯一的*/
/* text-align 文本对齐方式 */
/* text-decoration 下划线 */
/* text-transform 控制文本大小写 */
/* text-indent 首行文本链接 */s
#para1 {
    font-size: large;
    text-align: center;
    text-decoration: underline;
    text-transform: capitalize;
    text-indent: 500px;
    color: rgb(162, 0, 255);
}

/* 类选择器 */
.title {
    color: limegreen
}

.color {
    color: #5900ff;
}

table,
td {
    border: 3px solid red;
}

table {
    border-collapse: collapse;
    width: 500px;
    height: 300px;
}

td {
    text-align: center;
    vertical-align: bottom;
    background-color: #EEEEEE;
}

ol,
li {
    color: red;
}

/* cover保持图片纵横比并将图片缩放成完全覆盖背景区域的最小大小 */
/* contain保持图片纵横比并将图像缩放成适合背景定位区域的最大大小 */
/* vertical-align 设置垂直对齐 */
/* padding:15px 10px表格填充 上下左右填充 */
/* 盒子模型 外边距（margin），边框（border），内边距（padding），和实际内容（content)*/
.box {
    width: 300px;
    height: 300px;
    background-image: url("background.jpg");
    background-repeat: repeat;
    background-size: cover;
    background-position: left center;
    padding: 50px;
    border: 5px solid pink;
    margin: 50px;

}

/* 弹性盒子模型 */
/* display 属性 flex开启弹性盒 子元素默认水平排列 */
/* flex-direction属性指定了弹性子元素在父容器中的位置 row column row/column-reverse */
/* justify-content 弹性项沿着弹性容器的主轴线（main axis）对齐  flex-start | flex-end | center*/
/* align-items 弹性盒子元素在侧轴（纵轴）方向上的对齐方式  flex-start | flex-end | center */
/* flex 弹性盒子元素所设置的扩展因子作为比率来分配剩余空间*/
.container {
    width: 500px;
    height: 500px;
    background-color: green;
    display: flex;
    flex-direction: row-reverse;
    justify-content: center;
    align-items: center;


}

.box1 {
    width: 100px;
    height: 100px;
    background-color: #00fff2;
    flex: 3;

}

.box2 {
    width: 100px;
    height: 100px;
    background-color: #ffd900;
    flex: 1;

}

.box3 {
    width: 100px;
    height: 100px;
    background-color: #000000;
    flex: 1;

}



/* 后代选择器 空格分开 */
ul li {
    color: #000;
}

/* 子代选择器 >分开 直接元素生效,更深一层元素不生效*/
div>h1 {
    color: #000
}

/* 相邻兄弟选择器 +分开 选择相邻的第一个兄弟元素生效，只能向下选择 */
strong+b {
    color: #5900ff
}

/* 通用选择器 ~分开 ，选择i下面的所有del,作用于多个元素 */
i~del {
    color: magenta
}

/* 文件流 */
/* 浮动 元素无空隙 */
.div_float{
    width:300px;
    background-color: rgb(255, 0, 0);
}
.img {
    width: 100px;
    float: left;
}

/* 设置导航效果 横向摆放宽度不够会摆在下一行*/
.nav li {
    float: left;
    margin-right: 40px; /* 可以增加一点间隔，让导航项之间不那么挤在一起 */
}

/* 清除浮动 1.浮动元素会造成父元素高度塌陷  2.后续元素会受到影响*/
/* 1.父元素设置高度 2.受影响的元素增加clear属性 3.overflow清除浮动 4.伪对象方式*/
.div_float_height{
    width:300px;
    height: 300px;
    background-color: rgb(255, 0, 0);
}
.box_float_clear{
    width: 100px;
    height: 100px;
    background-color: #00fff2;
    clear: both;
}
.div_float_overflow{
    width:300px;
    /* height: 300px; */
    background-color: rgb(111, 0, 255);
    overflow: hidden;
    clear: both;
}
.div_float_display{
    width:300px;
    background-color: rgb(255, 0, 0);
}
.div_float_display::after{
    content: "";
    display: block;
    clear: both;
}

/* 定位 相对定位relative   绝对定位absolute   设置几个就有几层*/
/* 定位的问题相对定位和绝对定位他是相对于具有定位的父级元素进行位置调整，
如果父级元素不存在定位，则继续向上逐级寻找，直到顶层文档 */

.div_relative{
    width: 200px;
    height: 200px;
    background-color: aqua;
    position: relative;
    left: 300px;
    top: 100px;
}

.box_position{
    width: 100px;
    height: 100px;
    background-color: #5900ff;
    position: absolute;
    left: 50px;
    top: 50px;
    z-index: 50;

}
/* 固定定位fiexd 不会随着页面的滚动改变位置 一般用做页面固定按钮 */
.div_fixed{
    width: 100px;
    height: 100px;
    background-color: aqua;
    position: fixed;
    right: 100px;
    bottom: 100px;
}
/* Z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面*/
.box_index{
    width: 100px;
    height: 100px;
    background-color: #ff0000;
    position: absolute;
    z-index: 100;
}
/* CSS 圆角 border-radius*/

.box_border_radius{
    
}